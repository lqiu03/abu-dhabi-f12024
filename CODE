### Chart 1: Generate the Yas Marine Circuit Race Track
!pip install fastf1

import matplotlib.pyplot as plt
import numpy as np
import fastf1


session = fastf1.get_session(2024, 'ABU', 'Q')
session.load()

lap = session.laps.pick_fastest()
pos = lap.get_pos_data()

circuit_info = session.get_circuit_info()

def rotate(xy, *, angle):
    rot_mat = np.array([[np.cos(angle), np.sin(angle)],
                        [-np.sin(angle), np.cos(angle)]])
    return np.matmul(xy, rot_mat)

track = pos.loc[:, ('X', 'Y')].to_numpy()

# Convert the rotation angle from degrees to radian.
track_angle = circuit_info.rotation / 180 * np.pi

# Rotate and plot the track map.
rotated_track = rotate(track, angle=track_angle)
plt.plot(rotated_track[:, 0], rotated_track[:, 1])

offset_vector = [500, 0]  # offset length is chosen arbitrarily to 'look good'

# Iterate over all corners.
for _, corner in circuit_info.corners.iterrows():
    # Create a string from corner number and letter
    txt = f"{corner['Number']}{corner['Letter']}"

    # Convert the angle from degrees to radian.
    offset_angle = corner['Angle'] / 180 * np.pi

    # Rotate the offset vector so that it points sideways from the track.
    offset_x, offset_y = rotate(offset_vector, angle=offset_angle)

    # Add the offset to the position of the corner
    text_x = corner['X'] + offset_x
    text_y = corner['Y'] + offset_y

    # Rotate the text position equivalently to the rest of the track map
    text_x, text_y = rotate([text_x, text_y], angle=track_angle)

    # Rotate the center of the corner equivalently to the rest of the track map
    track_x, track_y = rotate([corner['X'], corner['Y']], angle=track_angle)

    # Draw a circle next to the track.
    plt.scatter(text_x, text_y, color='grey', s=140)

    # Draw a line from the track to this circle.
    plt.plot([track_x, text_x], [track_y, text_y], color='grey')

    # Finally, print the corner number inside the circle.
    plt.text(text_x, text_y, txt,
             va='center_baseline', ha='center', size='small', color='white')

plt.title(session.event['Location'])
plt.xticks([])
plt.yticks([])
plt.axis('equal')
plt.show()

###Chart 2: Generate Norris vs. Sainz Lap times and types of tires used
import pandas as pd
import seaborn as sns
from matplotlib import pyplot as plt
import fastf1
import fastf1.plotting

# Set up FastF1 plotting style
fastf1.plotting.setup_mpl(mpl_timedelta_support=True, misc_mpl_mods=False,
                          color_scheme='fastf1')

# Load a session that has known data (2023 Abu Dhabi GP Race)
race = fastf1.get_session(2024, "Abu Dhabi", 'R')
race.load()

# Pick laps for Norris and Sainz
# We remove .pick_quicklaps() for demonstration to ensure we see data
laps_nor = race.laps.pick_drivers("NOR").copy()
laps_sai = race.laps.pick_drivers("SAI").copy()

# Check if there's any lap data; if empty, no plot will appear
if laps_nor.empty or laps_sai.empty:
    print("No lap data found for one or both drivers.")
else:
    # Ensure a 'Driver' column is present (it should be by default)
    laps_nor['Driver'] = 'NOR'
    laps_sai['Driver'] = 'SAI'

    # Combine into one DataFrame
    driver_laps = pd.concat([laps_nor, laps_sai], ignore_index=True)

    # Define driver colors
    driver_colors = {
        'NOR': '#FFA500',  # Bright orange
        'SAI': '#800000',  # Bordeaux red
    }

    # Define line styles for compounds
    # Common F1 compounds: SOFT, MEDIUM, HARD
    # Sometimes INTERMEDIATE, WET might appear if it was a wet race.
    compound_styles = {
        'SOFT': '',
        'MEDIUM': (4,2),
        'HARD': (1,1),
        'INTERMEDIATE': (3,1,1,1),
        'WET': (5,2,5,2)
    }

    # Create the plot
    fig, ax = plt.subplots(figsize=(8, 8))

    # Plot with hue for Driver (color) and style for Compound (line style)
    sns.lineplot(
        data=driver_laps,
        x="LapNumber",
        y="LapTime",
        hue="Driver",
        style="Compound",
        palette=driver_colors,
        dashes=compound_styles,
        ax=ax,
        linewidth=2,
        markers=False
    )

    # Invert y-axis because a lower lap time is better
    ax.invert_yaxis()

    # Set labels and title
    ax.set_xlabel("Lap Number")
    ax.set_ylabel("Lap Time")
    plt.suptitle("Norris vs. Sainz Laptimes in the 2024 Abu Dhabi Grand Prix")

    # Turn on major grid lines
    plt.grid(color='w', which='major', axis='both')
    sns.despine(left=True, bottom=True)

    plt.tight_layout()
    plt.show()

###Chart 3: Generate Norris vs. Sainz lap gear shift side by side overlay
import matplotlib.pyplot as plt
import numpy as np
from matplotlib import colormaps
from matplotlib.collections import LineCollection

import fastf1

# Load the session data (2024 Abu Dhabi Race)
session = fastf1.get_session(2024, 'Abu Dhabi Grand Prix', 'R')
session.load()

# Pick the fastest lap for Norris and Sainz
lap_nor = session.laps.pick_driver("NOR").pick_fastest()
lap_sai = session.laps.pick_driver("SAI").pick_fastest()

# Function to create gear shift visualization for a given lap and axis
def plot_gear_shifts(ax, lap, title):
    tel = lap.get_telemetry()
    x = np.array(tel['X'].values)
    y = np.array(tel['Y'].values)

    points = np.array([x, y]).T.reshape(-1, 1, 2)
    segments = np.concatenate([points[:-1], points[1:]], axis=1)
    gear = tel['nGear'].to_numpy().astype(float)

    cmap = colormaps['Paired']
    lc_comp = LineCollection(segments, norm=plt.Normalize(1, cmap.N+1), cmap=cmap)
    lc_comp.set_array(gear)
    lc_comp.set_linewidth(4)

    # Add the line collection to the provided axis
    ax.add_collection(lc_comp)
    ax.axis('equal')
    ax.tick_params(labelleft=False, left=False, labelbottom=False, bottom=False)
    ax.set_title(title)

    # Add colorbar for this subplot
    cbar = plt.colorbar(mappable=lc_comp, ax=ax, label="Gear",
                        boundaries=np.arange(1, 10))
    cbar.set_ticks(np.arange(1.5, 9.5))
    cbar.set_ticklabels(np.arange(1, 9))

# Create the figure with two subplots side by side
fig, axes = plt.subplots(1, 2, figsize=(16, 8))

# Plot Norris on the left axis
plot_gear_shifts(axes[0], lap_nor, f"Lando Norris - {session.event['EventName']} {session.event.year}")

# Plot Sainz on the right axis
plot_gear_shifts(axes[1], lap_sai, f"Carlos Sainz - {session.event['EventName']} {session.event.year}")

fig.suptitle("2024 Abu Dhabi McLaren & Ferrari Fastest Lap Gear Shift Visualization\nGraph by Lucas Qiu | Data from Fast-F1 API", fontsize=16)

plt.tight_layout()
plt.show()

### Chart 4: Violin chart of NOR, PIA, LEC, SAI
import seaborn as sns
from matplotlib import pyplot as plt

import fastf1
import fastf1.plotting

# Enable Matplotlib patches for plotting timedelta values and load
# FastF1's dark color scheme
fastf1.plotting.setup_mpl(mpl_timedelta_support=True, misc_mpl_mods=False,
                          color_scheme='fastf1')

# Load the race session (2024 Abu Dhabi)
race = fastf1.get_session(2024, "Abu Dhabi", 'R')
race.load()

#  only want the following four drivers: NOR, PIA, LEC, SAI
desired_drivers = ["NOR", "PIA", "LEC", "SAI"]

# Get laps for these drivers only, and pick quick laps to filter out outliers
driver_laps = race.laps.pick_drivers(desired_drivers).pick_quicklaps().reset_index()

# Define a finishing order or any order you prefer for the x-axis
# (If no order is specified from race results, we can just use the list)
finishing_order = desired_drivers

# Convert LapTime (timedelta) to float (seconds) for plotting
driver_laps["LapTime(s)"] = driver_laps["LapTime"].dt.total_seconds()

# Create the figure
fig, ax = plt.subplots(figsize=(10, 5))

# Plot violin plot to show lap time distribution
sns.violinplot(
    data=driver_laps,
    x="Driver",
    y="LapTime(s)",
    hue="Driver",
    inner=None,
    density_norm="area",
    order=finishing_order,
    palette=fastf1.plotting.get_driver_color_mapping(session=race)
)

# Overlay a swarm plot to show the actual laptimes
sns.swarmplot(
    data=driver_laps,
    x="Driver",
    y="LapTime(s)",
    order=finishing_order,
    hue="Compound",
    palette=fastf1.plotting.get_compound_mapping(session=race),
    hue_order=["SOFT", "MEDIUM", "HARD"],  # Adjust if compounds differ
    linewidth=0,
    size=4,
)
ax.set_xlabel("Driver")
ax.set_ylabel("Lap Time (s)")
plt.suptitle("2024 Abu Dhabi Grand Prix Lap Time Distributions\nMcLaren & Ferrari Head to Head | Graph by Lucas Qiu, Data from Fast-F1 API")

sns.despine(left=True, bottom=True)
plt.tight_layout()
plt.show()

### Chart 5: Generate Team pace graph

import seaborn as sns
from matplotlib import pyplot as plt
import fastf1
import fastf1.plotting

fastf1.plotting.setup_mpl(mpl_timedelta_support=False, misc_mpl_mods=False,
                          color_scheme='fastf1')

# Load the race session.
# Pick all quick laps (within 107% of fastest lap).
# For races with mixed conditions, pick_wo_box() is better.
race = fastf1.get_session(2024, 24, 'R')
race.load()
laps = race.laps.pick_quicklaps()

# Convert the lap time column from timedelta to integer.
# This is a seaborn-specific modification.
# If plotting with matplotlib, set mpl_timedelta_support to true
# with plotting.setup_mpl.
transformed_laps = laps.copy()
transformed_laps.loc[:, "LapTime (s)"] = laps["LapTime"].dt.total_seconds()

# order the team from the fastest (lowest median lap time) tp slower
team_order = (
    transformed_laps[["Team", "LapTime (s)"]]
    .groupby("Team")
    .median()["LapTime (s)"]
    .sort_values()
    .index
)
print(team_order)

# make a color palette associating team names to hex codes
team_palette = {team: fastf1.plotting.get_team_color(team, session=race)
                for team in team_order}

fig, ax = plt.subplots(figsize=(15, 10))
sns.boxplot(
    data=transformed_laps,
    x="Team",
    y="LapTime (s)",
    hue="Team",
    order=team_order,
    palette=team_palette,
    whiskerprops=dict(color="white"),
    boxprops=dict(edgecolor="white"),
    medianprops=dict(color="grey"),
    capprops=dict(color="white"),
)

plt.title("2024 Abu Dhabi Grand Prix by Lucas Qiu | Data from Fast-F1 API")
plt.grid(visible=False)

# x-label is redundant
ax.set(xlabel=None)
plt.tight_layout()
plt.show()

